package shdproperty;

import javax.swing.JOptionPane;
import java.sql.*;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import utilities.DATABASE_CONSTANTS;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author bchar
 */
public class RPROPERTY extends javax.swing.JFrame {

    Connection conn=null;
    ResultSet rs =null;
    PreparedStatement pst=null;
    /**
     * Creates new form RPROPERTY
     */
    public RPROPERTY() {
        initComponents();
        show_properties();
        txtPropNum.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDele.setEnabled(false);
        btnReset.setEnabled(true);
        Fill_StateCbo();
        Fill_TenantCbo();
        Fill_BldgStyle();
        Fill_ParkingType();
    }

    public void btnInsert() {
        txtPropNum.setText(" ");
        txtAddr.setText(" ");
        txtZip.setText(" ");
        txtCity.setText(" ");
        cboState.setSelectedItem("--");
        cboBldgType.setSelectedItem("--");
        cboTenant.setSelectedItem("0");
        cboParkType.setSelectedItem("--");
        txtPhone.setText(" ");
        txtBeds.setText(" ");
        txtBaths.setText(" ");
        chkWash.setSelected(false);
        chkDryr.setSelected(false);
        chkDeckPat.setSelected(false);
        chkBase.setSelected(false);
        txtTotalTens.setText(" ");
    }
    
    public ArrayList<Prop> propertyList(){
        ArrayList<Prop> propList = new ArrayList<>();
        try {
             Class.forName(DATABASE_CONSTANTS.DRIVER);
             String url = "jdbc:mysql://localhost:3306/";
             Connection conn = DriverManager.getConnection(DATABASE_CONSTANTS.URL, DATABASE_CONSTANTS.USERNAME, DATABASE_CONSTANTS.PASSWORD);
             String sql = "Select * from shd.property";
             Statement st = conn.createStatement();
             ResultSet rs = st.executeQuery(sql);
             Prop prop;
             while(rs.next())
             {
                prop=new Prop(rs.getInt("propertyID"), rs.getString("streetAddress") ,rs.getString("city") ,rs.getString("state") ,rs.getString("zipCode") ,rs.getString("phoneNumber") ,rs.getString("numOfRooms") ,rs.getString("numberOfBaths") ,rs.getString("Tennant_ssn"), rs.getString("numOfTennants"), rs.getString("buildingType"), rs.getString("offStreetParking"), rs.getString("parkingType"), rs.getBoolean("washer"), rs.getBoolean("dryer"), rs.getBoolean("deckOrPatio"), rs.getBoolean("basement"));
                propList.add(prop);
                
             }  
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
         return propList;
        
    }
    
    public void show_properties() {
        ArrayList<Prop> list = propertyList();
        DefaultTableModel model = (DefaultTableModel)tblProp.getModel();
        Object[] row = new Object[17];
        for (int i=0;i<list.size();i++){
            
            row[0]=list.get(i).getstreetAddress();
            row[1]=list.get(i).getCity();
            row[2]=list.get(i).getState();
            row[3]=list.get(i).getZipCode();
            row[4]=list.get(i).getBuildingType();
            row[5]=list.get(i).getNumOfRooms();
            row[6]=list.get(i).getNumberOfBaths();
            row[7]=list.get(i).getWasher();
            row[8]=list.get(i).getDryer();
            row[9]=list.get(i).getDeckOrPatio();
            row[10]=list.get(i).getBasement();
            row[11]=list.get(i).getOffStreetParking();
            row[12]=list.get(i).getParkingType();
            row[13]=list.get(i).getTennant_ssn();
            row[14]=list.get(i).getPhoneNumber();
            row[15]=list.get(i).getNoOfTennants();
            row[16]=list.get(i).getpropertyID();
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblParkType = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProp = new javax.swing.JTable();
        lblAddr = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblState = new javax.swing.JLabel();
        lblZip = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblTenNum = new javax.swing.JLabel();
        lblTotalTens = new javax.swing.JLabel();
        lblPropNum = new javax.swing.JLabel();
        txtTotalTens = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtZip = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtPropNum = new javax.swing.JTextField();
        txtAddr = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel9 = new javax.swing.JLabel();
        lblTotalBeds = new javax.swing.JLabel();
        txtBeds = new javax.swing.JTextField();
        lblTotalBaths = new javax.swing.JLabel();
        txtBaths = new javax.swing.JTextField();
        chkWash = new javax.swing.JCheckBox();
        chkDryr = new javax.swing.JCheckBox();
        chkBase = new javax.swing.JCheckBox();
        chkPark = new javax.swing.JCheckBox();
        chkDeckPat = new javax.swing.JCheckBox();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDele = new javax.swing.JButton();
        cboState = new javax.swing.JComboBox<>();
        cboTenant = new javax.swing.JComboBox<>();
        lblBldg = new javax.swing.JLabel();
        cboBldgType = new javax.swing.JComboBox<>();
        lblBldg1 = new javax.swing.JLabel();
        cboParkType = new javax.swing.JComboBox<>();
        btnReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblProp.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblProp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "City", "State", "Zip", "Style", "# of Bedrooms", "# of Bathrooms", "Washer", "Dryer", "Deck/Patio", "Basement", "Off Street Parkng", "Parking Type", "Tenant#", "Contact#", "# of Tenants", "Property#"
            }
        ));
        tblProp.getTableHeader().setReorderingAllowed(false);
        tblProp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPropMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProp);

        lblAddr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAddr.setText("Address :");

        lblCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblCity.setText("City :");

        lblState.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblState.setText("State :");

        lblZip.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblZip.setText("Zip :");

        lblPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPhone.setText("Contact# :");

        lblTenNum.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTenNum.setText("Tenant# :");

        lblTotalTens.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTotalTens.setText("Total Tenants :");

        lblPropNum.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPropNum.setText("Property# :");

        txtTotalTens.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtZip.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtPropNum.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtAddr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jSeparator1.setFont(new java.awt.Font("Palatino Linotype", 2, 12)); // NOI18N

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel9.setFont(new java.awt.Font("Copperplate Gothic Bold", 2, 12)); // NOI18N
        jLabel9.setText("Features:");

        lblTotalBeds.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTotalBeds.setText("Total Bedrooms :");

        txtBeds.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblTotalBaths.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTotalBaths.setText("Total Bathrooms:");

        txtBaths.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        chkWash.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkWash.setText("Washer");

        chkDryr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkDryr.setText("Dryer");

        chkBase.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkBase.setText("Basement");

        chkPark.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkPark.setText("Off Street Parking");

        chkDeckPat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chkDeckPat.setText("Deck/Patio");

        btnInsert.setText("INSERT");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDele.setText("DELETE");
        btnDele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleActionPerformed(evt);
            }
        });

        cboState.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cboTenant.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblBldg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblBldg.setText("Style :");

        cboBldgType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblBldg1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblBldg1.setText("Type of Parking :");

        cboParkType.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnReset.setText("RESET");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lblParkTypeLayout = new javax.swing.GroupLayout(lblParkType);
        lblParkType.setLayout(lblParkTypeLayout);
        lblParkTypeLayout.setHorizontalGroup(
            lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblParkTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(lblParkTypeLayout.createSequentialGroup()
                        .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addComponent(lblPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addComponent(lblTenNum, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboTenant, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addComponent(lblTotalTens, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalTens, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblState, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(lblParkTypeLayout.createSequentialGroup()
                                        .addComponent(cboState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(lblBldg)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cboBldgType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPropNum, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPropNum, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addComponent(lblZip, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(111, 111, 111)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTotalBaths, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTotalBeds, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chkWash)
                                    .addComponent(chkDryr)
                                    .addComponent(chkDeckPat))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBeds, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBaths, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chkBase)
                                    .addComponent(chkPark))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE))
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(lblParkTypeLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(lblParkTypeLayout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(lblBldg1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cboParkType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(lblParkTypeLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 953, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lblParkTypeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnInsert)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDele)
                .addGap(18, 18, 18)
                .addComponent(btnReset)
                .addGap(336, 336, 336))
        );
        lblParkTypeLayout.setVerticalGroup(
            lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lblParkTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(lblParkTypeLayout.createSequentialGroup()
                        .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(lblAddr))
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPropNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPropNum))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addComponent(lblCity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblState)
                                    .addComponent(cboState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(lblParkTypeLayout.createSequentialGroup()
                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBldg)
                                    .addComponent(cboBldgType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblZip)
                            .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPhone)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTenNum)
                            .addComponent(cboTenant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTotalTens)
                            .addComponent(txtTotalTens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(lblParkTypeLayout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtBeds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblTotalBeds))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTotalBaths, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtBaths, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(29, 29, 29)
                            .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(lblParkTypeLayout.createSequentialGroup()
                                    .addComponent(chkWash)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(chkDryr))
                                .addGroup(lblParkTypeLayout.createSequentialGroup()
                                    .addComponent(chkBase)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(chkPark)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(chkDeckPat)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblBldg1)
                                .addComponent(cboParkType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(lblParkTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDele, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblParkType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblParkType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // Update existing property records
        try{
                btnInsert.setEnabled(true);
                Class.forName(DATABASE_CONSTANTS.DRIVER);
                String url = "jdbc:mysql://localhost:3306/";
                Connection conn = DriverManager.getConnection(DATABASE_CONSTANTS.URL, DATABASE_CONSTANTS.USERNAME, DATABASE_CONSTANTS.PASSWORD);
                int row = tblProp.getSelectedRow();
                String value = (tblProp.getModel().getValueAt(row, 16).toString());
                String sql = "UPDATE shd.property SET deckOrPatio=?,washer=?,dryer=?,offStreetParking=?,numberOfBaths=?,buildingType=?,phoneNumber=?,basement=?,parkingType=?,numOfRooms=?,zipCode=?,streetAddress=?,city=?,state=?,numOfTennants=?,Tennant_ssn=? where propertyID="+value;
                PreparedStatement pst = conn.prepareStatement(sql);
                
                boolean chkDeckPatValue = chkDeckPat.isSelected();
                pst.setBoolean (1, chkDeckPatValue);
                boolean chkWashValue = chkWash.isSelected();
                pst.setBoolean (2, chkWashValue);
                boolean chkDryValue = chkDryr.isSelected();
                pst.setBoolean (3, chkDryValue);
                boolean chkParkValue = chkPark.isSelected();
                pst.setBoolean (4, chkParkValue);
                pst.setString (5, txtBaths.getText());
                String cboBldgTypeValue = cboBldgType.getSelectedItem().toString();
                pst.setString (6, cboBldgTypeValue);
                pst.setString (7, txtPhone.getText());
                boolean chkBaseValue = chkBase.isSelected();
                pst.setBoolean (8, chkBaseValue);
                String cboParkTypeValue = cboParkType.getSelectedItem().toString();
                pst.setString (9, cboParkTypeValue);
                pst.setString (10, txtBeds.getText());
                pst.setString (11, txtZip.getText());
                pst.setString (12, txtAddr.getText());
                pst.setString (13, txtCity.getText());
                String cboStateValue = cboState.getSelectedItem().toString();
                pst.setString (14, cboStateValue);
                pst.setString (15, txtTotalTens.getText());               
                String cboTenantValue = cboTenant.getSelectedItem().toString();
                pst.setString (16, cboTenantValue);                
         
                pst.execute();
         
                DefaultTableModel model = (DefaultTableModel)tblProp.getModel();
                model.setRowCount(0);
                btnInsert();
                
                JOptionPane.showMessageDialog(null, "Record successfully updated");
               
                show_properties();
                btnUpdate.setEnabled(false);
                btnDele.setEnabled(false);
            }
            
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
            show_properties();
        }    
     
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
         // Add new property records
        try{
                Class.forName(DATABASE_CONSTANTS.DRIVER);
                String url = "jdbc:mysql://localhost:3306/";
                Connection conn = DriverManager.getConnection(DATABASE_CONSTANTS.URL, DATABASE_CONSTANTS.USERNAME, DATABASE_CONSTANTS.PASSWORD);
                String sql = "Insert into shd.property (deckOrPatio,washer,dryer,offStreetParking,numberOfBaths,buildingType,phoneNumber,basement,parkingType,numOfRooms,zipCode,streetAddress,city,state,numOfTennants,Tennant_ssn) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement pst = conn.prepareStatement(sql);
                
                boolean chkDeckPatValue = chkDeckPat.isSelected();
                pst.setBoolean (1, chkDeckPatValue);
                boolean chkWashValue = chkWash.isSelected();
                pst.setBoolean (2, chkWashValue);
                boolean chkDryValue = chkDryr.isSelected();
                pst.setBoolean (3, chkDryValue);
                boolean chkParkValue = chkPark.isSelected();
                pst.setBoolean (4, chkParkValue);
                pst.setString (5, txtBaths.getText());
                String cboBldgTypeValue = cboBldgType.getSelectedItem().toString();
                pst.setString (6, cboBldgTypeValue);
                pst.setString (7, txtPhone.getText());
                boolean chkBaseValue = chkBase.isSelected();
                pst.setBoolean (8, chkBaseValue);
                String cboParkTypeValue = cboParkType.getSelectedItem().toString();
                pst.setString (9, cboParkTypeValue);
                pst.setString (10, txtBeds.getText());
                pst.setString (11, txtZip.getText());
                pst.setString (12, txtAddr.getText());
                pst.setString (13, txtCity.getText());
                String cboStateValue = cboState.getSelectedItem().toString();
                pst.setString (14, cboStateValue);
                pst.setString (15, txtTotalTens.getText());               
                String cboTenantValue = cboTenant.getSelectedItem().toString();
                pst.setString (16, cboTenantValue);
                pst.execute();
                DefaultTableModel model = (DefaultTableModel)tblProp.getModel();
                model.setRowCount(0);
                
                JOptionPane.showMessageDialog(null, "Entry Saved");
               
                btnInsert();
                show_properties();
            }
            
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
            show_properties();
        }
    
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleActionPerformed
         // Update existing property records
        try{
                btnInsert.setEnabled(true);
                Class.forName(DATABASE_CONSTANTS.DRIVER);
                String url = "jdbc:mysql://localhost:3306/";
                Connection conn = DriverManager.getConnection(DATABASE_CONSTANTS.URL, DATABASE_CONSTANTS.USERNAME, DATABASE_CONSTANTS.PASSWORD);
                int row = tblProp.getSelectedRow();
                String value = (tblProp.getModel().getValueAt(row, 16).toString());
                String sql = "DELETE FROM shd.property where propertyID="+value;
                PreparedStatement pst = conn.prepareStatement(sql);
                pst.execute();
         
                DefaultTableModel model = (DefaultTableModel)tblProp.getModel();
                model.setRowCount(0);
                btnInsert();
                
                JOptionPane.showMessageDialog(null, "Record has been deleted!");
               
                show_properties();
                
                btnUpdate.setEnabled(false);
                btnDele.setEnabled(false);
            }
            
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
            show_properties();
        }    
    }//GEN-LAST:event_btnDeleActionPerformed

    private void tblPropMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPropMouseClicked
        // Populate text fields from table display
        
        btnInsert.setEnabled(false);
        btnUpdate.setEnabled(true);
        btnDele.setEnabled(true);  
        btnReset.setEnabled(true);
 
        int i = tblProp.getSelectedRow();
        TableModel model = tblProp.getModel();
        txtAddr.setText(model.getValueAt(i, 0).toString());
        txtCity.setText(model.getValueAt(i, 1).toString());
        cboState.setSelectedItem(model.getValueAt(i, 2).toString());
        txtZip.setText(model.getValueAt(i, 3).toString());
        cboBldgType.setSelectedItem(model.getValueAt(i, 4).toString());
        txtBeds.setText(model.getValueAt(i, 5).toString());
        txtBaths.setText(model.getValueAt(i, 6).toString());
        String chkWashVal = model.getValueAt(i, 7).toString();
            if(chkWashVal.equals("true")) {
                chkWash.setSelected(true);
            }
            else {
                chkWash.setSelected(false); 
            }
        String chkDryrVal = model.getValueAt(i, 8).toString();
            if(chkDryrVal.equals("true")) {
                chkDryr.setSelected(true);
            }  
            else {
                chkDryr.setSelected(false); 
            }
        String chkDeckPatVal = model.getValueAt(i, 9).toString();
            if(chkDeckPatVal.equals("true")) {
                chkDeckPat.setSelected(true);
            }
            else {
                chkDeckPat.setSelected(false); 
            }
        String chkBaseVal = model.getValueAt(i, 10).toString();
            if(chkBaseVal.equals("true")) {
                chkBase.setSelected(true);
            }
            else {
                chkBase.setSelected(false); 
            }
        String chkParkVal = model.getValueAt(i, 11).toString();
            if(chkParkVal.equals("true")) {
                chkPark.setSelected(true);
            }
            else {
                chkPark.setSelected(false); 
            }
        cboParkType.setSelectedItem(model.getValueAt(i, 12).toString());
        cboTenant.setSelectedItem(model.getValueAt(i, 13).toString());
        txtPhone.setText(model.getValueAt(i, 14).toString());
        txtTotalTens.setText(model.getValueAt(i, 15).toString());
        txtPropNum.setText(model.getValueAt(i, 16).toString());

    }//GEN-LAST:event_tblPropMouseClicked

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // Clear text fields
        btnInsert();
        btnUpdate.setEnabled(false);
        btnDele.setEnabled(false);
        btnInsert.setEnabled(true);
        btnReset.setEnabled(true);
    }//GEN-LAST:event_btnResetActionPerformed

    private void Fill_StateCbo() {
        try {
            Connection conn = DriverManager.getConnection(DATABASE_CONSTANTS.URL, DATABASE_CONSTANTS.USERNAME, DATABASE_CONSTANTS.PASSWORD);
            String sql="select * from shd.state";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst=conn.prepareStatement(sql);
             rs=pst.executeQuery();
            while(rs.next())
            {
                String name = rs.getString("state_abbr");
                cboState.addItem(name);
                
            }   

        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void Fill_TenantCbo() {
        try {
            Connection conn = DriverManager.getConnection(DATABASE_CONSTANTS.URL, DATABASE_CONSTANTS.USERNAME, DATABASE_CONSTANTS.PASSWORD);
            String sql="select * from shd.tennant";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            while(rs.next())
            {
                String name = rs.getString("ssn");
                cboTenant.addItem(name);
                
            }   

        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void Fill_BldgStyle() {
        try {
            Connection conn = DriverManager.getConnection(DATABASE_CONSTANTS.URL, DATABASE_CONSTANTS.USERNAME, DATABASE_CONSTANTS.PASSWORD);
            String sql="select * from shd.bldg_style";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            while(rs.next())
            {
                String name = rs.getString("bldg_style");
                cboBldgType.addItem(name);
                
            }   

        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void Fill_ParkingType() {
        try {
            Connection conn = DriverManager.getConnection(DATABASE_CONSTANTS.URL, DATABASE_CONSTANTS.USERNAME, DATABASE_CONSTANTS.PASSWORD);
            String sql="select * from shd.parking_style";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            while(rs.next())
            {
                String name = rs.getString("park_style");
                cboParkType.addItem(name);
                
            }   

        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RPROPERTY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RPROPERTY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RPROPERTY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RPROPERTY.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RPROPERTY().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDele;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboBldgType;
    private javax.swing.JComboBox<String> cboParkType;
    private javax.swing.JComboBox<String> cboState;
    private javax.swing.JComboBox<String> cboTenant;
    private javax.swing.JCheckBox chkBase;
    private javax.swing.JCheckBox chkDeckPat;
    private javax.swing.JCheckBox chkDryr;
    private javax.swing.JCheckBox chkPark;
    private javax.swing.JCheckBox chkWash;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblAddr;
    private javax.swing.JLabel lblBldg;
    private javax.swing.JLabel lblBldg1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JPanel lblParkType;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblPropNum;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblTenNum;
    private javax.swing.JLabel lblTotalBaths;
    private javax.swing.JLabel lblTotalBeds;
    private javax.swing.JLabel lblTotalTens;
    private javax.swing.JLabel lblZip;
    private javax.swing.JTable tblProp;
    private javax.swing.JTextField txtAddr;
    private javax.swing.JTextField txtBaths;
    private javax.swing.JTextField txtBeds;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtPropNum;
    private javax.swing.JTextField txtTotalTens;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables

    private static class Prop {

    private int propertyID;
    private String streetAddress, city, state, zipCode, phoneNumber, numOfRooms, numberOfBaths, tennant_ssn, noOfTennants, buildingType, offStreetParking, parkingType;
    private Boolean washer, dryer, deckOrPatio, basement;
    
    public Prop (int propertyID, String streetAddress, String city, String state, String zipCode, String phoneNumber, String numOfRooms, String numberOfBaths, String tennant_ssn, String noOfTennants, String buildingType, String offStreetParking, String parkingType, Boolean washer, Boolean dryer, Boolean deckOrPatio, Boolean basement) {
        this.streetAddress=streetAddress;
        this.city=city;
        this.state = state;
        this.zipCode=zipCode;
        this.buildingType=buildingType;
        this.numOfRooms=numOfRooms;
        this.numberOfBaths=numberOfBaths;
        this.washer=washer;
        this.dryer=dryer;    
        this.deckOrPatio=deckOrPatio;
        this.basement=basement;
        this.offStreetParking=offStreetParking;
        this.parkingType=parkingType;
        this.tennant_ssn=tennant_ssn;
        this.phoneNumber=phoneNumber;
        this.noOfTennants=noOfTennants;
        this.propertyID=propertyID;
    }
    public int getpropertyID() {
        return propertyID ;
    }
    
    public String getstreetAddress() {
        return streetAddress;
    }
    
    public String getCity() {
        return city;
    }
    
    public String getState() {
        return state;
    }
    
    public String getZipCode() {
        return zipCode;
    }
    
    public String getPhoneNumber() {
        return phoneNumber;
    }
    
    public String getNumOfRooms() {
        return numOfRooms;
    }
    
    public String getNumberOfBaths() {
        return numberOfBaths;
    }
    
    public String getTennant_ssn() {
        return tennant_ssn;
    }  
    
    public String getNoOfTennants() {
        return noOfTennants;
    }
    
    public String getBuildingType() {
        return buildingType ;
    }
    
    public String getOffStreetParking() {
        return offStreetParking ;
    }
    
    public String getParkingType() {
        return parkingType ;
    }
    
    public boolean getWasher() {
        return washer ;
    }
    
    public boolean getDryer() {
        return dryer;
    }
    
    public boolean getDeckOrPatio() {
        return deckOrPatio;
    }
        
    public boolean getBasement() {
        return basement;
    }
  }
}
